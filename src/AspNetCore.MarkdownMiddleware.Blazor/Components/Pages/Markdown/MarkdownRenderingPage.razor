@page "/Markdown/MarkdownRenderingPage"
@using Markdig
@attribute [StreamRendering]

@if (RenderedMarkdown == null)
{
    <p><em>Loading...</em></p>
    return;
}

<PageTitle>@Title</PageTitle>

<div class="post">
    <h1 class="post-title">@Title</h1>
    <time datetime="@Date" class="post-date"><i class="far fa-calendar-alt"></i> @Date</time>
    <div class="post-content">
        @RenderedMarkdown
    </div>
</div>


@code {
    public string? Title { get; private set; }

    public string? Date { get; private set; }

    public MarkupString? RenderedMarkdown { get; private set; }

    [CascadingParameter]
    private HttpContext Context { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // retrive the model saved in the markdown redirect rule
        if (!(Context.Items["MarkdownModel"] is MarkdownModel model))
            throw new InvalidOperationException("No 'MarkdownModel' found in HttpContext.Items.");

        if (!System.IO.File.Exists(model.PhysicalPath))
            return;

        string markdownContent = await System.IO.File.ReadAllTextAsync(model.PhysicalPath).ConfigureAwait(false);

        if (string.IsNullOrEmpty(markdownContent))
            return;

        markdownContent = markdownContent.Replace("\r\n", "\n");

        // interpret toml frontmatter
        string toml = null;
        if (markdownContent.StartsWith("+++"))
            toml = _FindString(markdownContent, "+++", "+++");

        if (!string.IsNullOrEmpty(toml))
        {
            var dateString = _FindString(toml, "date = \"", "\"\n");
            if (DateTime.TryParse(dateString, out var date))
                dateString = date.ToLongDateString() + " " + date.ToLongTimeString();

            Title = _FindString(toml, "title = \"", "\"\n");
            Date = dateString;

            // remove toml frontmatter from markdown content
            markdownContent = markdownContent.Substring(toml.Length + 8);
        }

        // render markdown to html
        var _pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseEmojiAndSmiley()
            .Build();

        RenderedMarkdown = new MarkupString(Markdig.Markdown.ToHtml(markdownContent, _pipeline));
    }

    private static string _FindString(string source, string start, string end)
    {
        if (string.IsNullOrEmpty(source))
            return string.Empty;

        var startIndex = source.IndexOf(start, 0, source.Length);

        if (startIndex == -1)
            return string.Empty;

        var endIndex = source.IndexOf(end, startIndex + start.Length);

        if (startIndex > -1 && endIndex > 1)
            return source.Substring(startIndex + start.Length, endIndex - startIndex - start.Length);

        return string.Empty;
    }
}
