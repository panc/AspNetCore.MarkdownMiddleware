@page "/client-side-markdown"
@using Markdig
@rendermode InteractiveAuto

<PageTitle>WASM markdown rendering</PageTitle>

<h1>Client side markdown rendering</h1>

<button class="btn btn-primary" @onclick="LoadMarkdown">Load Markdown</button>

<p>Title: @title</p>
<p>Date: @date</p>
<p role="status">@renderedMarkdown</p>


@code {
    private MarkupString? renderedMarkdown;
    private string title = "";
    private string date = "";

    private async Task LoadMarkdown()
    {
        // retrive markdown content
        HttpClient client = new HttpClient { BaseAddress = new Uri("https://localhost:7002/") };
        var markdownContent = await client.GetStringAsync("md/Samples/Markdown-It.md");

        markdownContent = markdownContent.Replace("\r\n", "\n");

        // interpret toml frontmatter
        string toml = null;
        if (markdownContent.StartsWith("+++"))
            toml = _FindString(markdownContent, "+++", "+++");

        if (!string.IsNullOrEmpty(toml))
        {
            var dateString = _FindString(toml, "date = \"", "\"\n");
            if (DateTime.TryParse(dateString, out var date))
                dateString = date.ToLongDateString() + " " + date.ToLongTimeString();

            title = _FindString(toml, "title = \"", "\"\n");
            this.date = dateString;

            // remove toml frontmatter from markdown content
            markdownContent = markdownContent.Substring(toml.Length + 8);
        }

        // render markdown to html
        var _pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseEmojiAndSmiley()
            .Build();

        renderedMarkdown = new MarkupString(Markdig.Markdown.ToHtml(markdownContent, _pipeline));
    }

    private static string _FindString(string source, string start, string end)
    {
        if (string.IsNullOrEmpty(source))
            return string.Empty;

        var startIndex = source.IndexOf(start, 0, source.Length);

        if (startIndex == -1)
            return string.Empty;

        var endIndex = source.IndexOf(end, startIndex + start.Length);

        if (startIndex > -1 && endIndex > 1)
            return source.Substring(startIndex + start.Length, endIndex - startIndex - start.Length);

        return string.Empty;
    }
}
